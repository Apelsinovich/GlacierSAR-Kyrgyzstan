#!/usr/bin/env python3
"""
–ü–†–ê–í–ò–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –ª–µ–¥–Ω–∏–∫–∞ –ì–æ–ª—É–±–∏–Ω–∞ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–∏–∫—Å–µ–ª—å–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –≤–º–µ—Å—Ç–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏—Ö
"""

import numpy as np
import rasterio
import matplotlib.pyplot as plt
import matplotlib.patches as mpatches
from datetime import datetime
from pathlib import Path
import json
from scipy.ndimage import binary_opening, binary_closing, median_filter

print("=" * 80)
print("üèîÔ∏è  –ê–ù–ê–õ–ò–ó –õ–ï–î–ù–ò–ö–ê –ì–û–õ–£–ë–ò–ù–ê (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
print("    –° —Ä–µ–∞–ª—å–Ω—ã–º–∏ SAR —Å–Ω–∏–º–∫–∞–º–∏")
print("=" * 80)

# –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ VV —Ñ–∞–π–ª—ã
data_dir = Path("output/raw_data")
vv_files = sorted(list(data_dir.glob("**/*vv*.tiff")))

print(f"\nüìä –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(vv_files)}")

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
viz_dir = Path("output/visualizations")
results_dir = Path("output/results")
viz_dir.mkdir(parents=True, exist_ok=True)
results_dir.mkdir(parents=True, exist_ok=True)

def extract_region(data, center_x=None, center_y=None, size=1500):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–±–ª–∞—Å—Ç—å –∏–∑ —Ü–µ–Ω—Ç—Ä–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    h, w = data.shape
    
    if center_x is None:
        center_x = w // 2
    if center_y is None:
        center_y = h // 2
    
    half_size = size // 2
    
    top = max(0, center_y - half_size)
    bottom = min(h, center_y + half_size)
    left = max(0, center_x - half_size)
    right = min(w, center_x + half_size)
    
    return data[top:bottom, left:right], (top, bottom, left, right)

def segment_ice_area(data_db, threshold=-15):
    """
    –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –ª–µ–¥–Ω–∏–∫–æ–≤—É—é –æ–±–ª–∞—Å—Ç—å
    –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π –ø–æ—Ä–æ–≥ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–∏—è
    """
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –º–µ–¥–∏–∞–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —à—É–º–∞
    data_filtered = median_filter(data_db, size=3)
    
    # –ú–∞—Å–∫–∞ –¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π (—Å—É—Ö–æ–π –ª–µ–¥/—Å–Ω–µ–≥)
    ice_mask = data_filtered > threshold
    
    # –ú–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
    ice_mask = binary_opening(ice_mask, structure=np.ones((5,5)))
    ice_mask = binary_closing(ice_mask, structure=np.ones((7,7)))
    
    return ice_mask

print("\nüî¨ –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
results = []
glacier_images = []

# –ö–ª—é—á–µ–≤—ã–µ –≥–æ–¥—ã –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
key_years = [2017, 2020, 2024, 2025]

for i, vv_file in enumerate(vv_files, 1):
    date_str = vv_file.stem.split('-')[4][:8]
    date = datetime.strptime(date_str, '%Y%m%d')
    year = date.year
    
    print(f"\n[{i}/{len(vv_files)}] {year}: {date.strftime('%Y-%m-%d')}")
    
    try:
        with rasterio.open(vv_file) as src:
            # –ß–∏—Ç–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            full_data = src.read(1)
            print(f"   üìê –†–∞–∑–º–µ—Ä: {full_data.shape}")
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –æ–±–ª–∞—Å—Ç—å (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —Ç–∞–º –ª–µ–¥–Ω–∏–∫)
            region, bounds = extract_region(full_data, size=1500)
            print(f"   üìç –û–±–ª–∞—Å—Ç—å: {bounds}")
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ dB
            region_db = 10 * np.log10(region.astype(float) + 1e-10)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            valid = np.isfinite(region_db)
            print(f"   üìä Backscatter: {np.mean(region_db[valid]):.2f} dB "
                  f"({np.min(region_db[valid]):.2f} - {np.max(region_db[valid]):.2f})")
            
            # –°–µ–≥–º–µ–Ω—Ç–∏—Ä—É–µ–º –ª–µ–¥–Ω–∏–∫
            ice_mask = segment_ice_area(region_db, threshold=-15)
            
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–ª–æ—â–∞–¥—å
            pixel_area = 10 * 10  # –º¬≤ (—Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ ~10–º –¥–ª—è Sentinel-1 GRD)
            ice_pixels = np.sum(ice_mask)
            ice_area_km2 = (ice_pixels * pixel_area) / 1e6
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ª–µ–¥–Ω–∏–∫–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
            ice_backscatter = region_db[ice_mask]
            ice_backscatter = ice_backscatter[np.isfinite(ice_backscatter)]
            
            if len(ice_backscatter) > 100:
                stats = {
                    'year': year,
                    'date': date.strftime('%Y-%m-%d'),
                    'ice_area_km2': float(ice_area_km2),
                    'ice_pixels': int(ice_pixels),
                    'mean_backscatter': float(np.mean(ice_backscatter)),
                    'std_backscatter': float(np.std(ice_backscatter)),
                    'coverage_percent': float(ice_pixels / ice_mask.size * 100),
                    'backscatter_min': float(np.min(ice_backscatter)),
                    'backscatter_max': float(np.max(ice_backscatter))
                }
                
                results.append(stats)
                
                print(f"   ‚úÖ –ü–ª–æ—â–∞–¥—å –ª—å–¥–∞: {ice_area_km2:.2f} –∫–º¬≤")
                print(f"   üìà –ü–æ–∫—Ä—ã—Ç–∏–µ: {stats['coverage_percent']:.1f}%")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                if year in key_years:
                    glacier_images.append({
                        'year': year,
                        'date': date.strftime('%Y-%m-%d'),
                        'data_db': region_db,
                        'ice_mask': ice_mask,
                        'stats': stats
                    })
                    print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
    
    except Exception as e:
        print(f"   ‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
if results:
    stats_file = results_dir / "glacier_correct_statistics.json"
    with open(stats_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    print(f"\nüíæ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {stats_file}")

# –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–ò
if glacier_images and len(glacier_images) >= 2:
    print("\nüìä –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–π...")
    
    # === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 1: –í—Ä–µ–º–µ–Ω–Ω–∞—è –¥–∏–Ω–∞–º–∏–∫–∞ ===
    n = len(glacier_images)
    fig = plt.figure(figsize=(6*n, 12))
    
    for idx, img in enumerate(glacier_images):
        # –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥: –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ SAR –¥–∞–Ω–Ω—ã–µ
        ax1 = plt.subplot(3, n, idx + 1)
        im1 = ax1.imshow(img['data_db'], cmap='gray', vmin=15, vmax=30)
        ax1.set_title(f"{img['year']}\nSAR Backscatter (VV)", 
                     fontsize=14, fontweight='bold')
        ax1.axis('off')
        plt.colorbar(im1, ax=ax1, label='dB', fraction=0.046, pad=0.04)
        
        # –°—Ä–µ–¥–Ω–∏–π —Ä—è–¥: –¶–≤–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        ax2 = plt.subplot(3, n, idx + 1 + n)
        im2 = ax2.imshow(img['data_db'], cmap='terrain', vmin=15, vmax=30)
        ax2.set_title(f"–¶–≤–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", fontsize=12, fontweight='bold')
        ax2.axis('off')
        plt.colorbar(im2, ax=ax2, label='dB', fraction=0.046, pad=0.04)
        
        # –ù–∏–∂–Ω–∏–π —Ä—è–¥: –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è (–ª–µ–¥ –≤—ã–¥–µ–ª–µ–Ω)
        ax3 = plt.subplot(3, n, idx + 1 + 2*n)
        
        # –°–æ–∑–¥–∞–µ–º RGB —Å –≤—ã–¥–µ–ª–µ–Ω–∏–µ–º –ª—å–¥–∞
        rgb = np.zeros((*img['data_db'].shape, 3))
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º backscatter –¥–ª—è —Ñ–æ–Ω–∞
        normalized = (img['data_db'] - 15) / 15
        normalized = np.clip(normalized, 0, 1)
        rgb[:,:,0] = normalized
        rgb[:,:,1] = normalized
        rgb[:,:,2] = normalized
        
        # –õ–µ–¥ –≤—ã–¥–µ–ª—è–µ–º –≥–æ–ª—É–±—ã–º
        rgb[img['ice_mask'], 0] = 0.1
        rgb[img['ice_mask'], 1] = 0.5
        rgb[img['ice_mask'], 2] = 1.0
        
        ax3.imshow(rgb)
        ax3.set_title(f"–ü–ª–æ—â–∞–¥—å –ª—å–¥–∞: {img['stats']['ice_area_km2']:.2f} –∫–º¬≤\n"
                     f"–ü–æ–∫—Ä—ã—Ç–∏–µ: {img['stats']['coverage_percent']:.1f}%",
                     fontsize=11, fontweight='bold')
        ax3.axis('off')
    
    plt.suptitle('–õ–µ–¥–Ω–∏–∫ –ì–æ–ª—É–±–∏–Ω–∞: –†–µ–∞–ª—å–Ω—ã–µ SAR —Å–Ω–∏–º–∫–∏ –∏ –∞–Ω–∞–ª–∏–∑\n'
                 'Ala-Archa Gorge, Kyrgyzstan (Sentinel-1A, VV polarization)',
                fontsize=16, fontweight='bold', y=0.99)
    plt.tight_layout(rect=[0, 0, 1, 0.98])
    
    output1 = viz_dir / "glacier_real_timeline.png"
    plt.savefig(output1, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output1.name}")
    plt.close()
    
    # === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 2: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ 2017 vs 2025 ===
    if len(glacier_images) >= 2:
        first = glacier_images[0]
        last = glacier_images[-1]
        
        fig = plt.figure(figsize=(20, 10))
        
        # === –ü–∞–Ω–µ–ª—å 1: 2017 –≥–æ–¥ ===
        # SAR –¥–∞–Ω–Ω—ã–µ
        ax1 = plt.subplot(2, 4, 1)
        im1 = ax1.imshow(first['data_db'], cmap='gray', vmin=15, vmax=30)
        ax1.set_title(f"{first['year']} - SAR Backscatter", fontsize=14, fontweight='bold')
        ax1.axis('off')
        plt.colorbar(im1, ax=ax1, label='dB', fraction=0.046)
        
        # –¶–≤–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        ax2 = plt.subplot(2, 4, 2)
        im2 = ax2.imshow(first['data_db'], cmap='terrain', vmin=15, vmax=30)
        ax2.set_title(f"{first['year']} - –¶–≤–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", fontsize=14, fontweight='bold')
        ax2.axis('off')
        plt.colorbar(im2, ax=ax2, label='dB', fraction=0.046)
        
        # === –ü–∞–Ω–µ–ª—å 2: 2025 –≥–æ–¥ ===
        # SAR –¥–∞–Ω–Ω—ã–µ
        ax3 = plt.subplot(2, 4, 3)
        im3 = ax3.imshow(last['data_db'], cmap='gray', vmin=15, vmax=30)
        ax3.set_title(f"{last['year']} - SAR Backscatter", fontsize=14, fontweight='bold')
        ax3.axis('off')
        plt.colorbar(im3, ax=ax3, label='dB', fraction=0.046)
        
        # –¶–≤–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞
        ax4 = plt.subplot(2, 4, 4)
        im4 = ax4.imshow(last['data_db'], cmap='terrain', vmin=15, vmax=30)
        ax4.set_title(f"{last['year']} - –¶–≤–µ—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞", fontsize=14, fontweight='bold')
        ax4.axis('off')
        plt.colorbar(im4, ax=ax4, label='dB', fraction=0.046)
        
        # === –ù–∏–∂–Ω–∏–π —Ä—è–¥ ===
        # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è 2017
        ax5 = plt.subplot(2, 4, 5)
        rgb1 = np.zeros((*first['data_db'].shape, 3))
        norm1 = (first['data_db'] - 15) / 15
        norm1 = np.clip(norm1, 0, 1)
        rgb1[:,:,:] = norm1[:,:,np.newaxis]
        rgb1[first['ice_mask'], :] = [0.1, 0.5, 1.0]
        ax5.imshow(rgb1)
        ax5.set_title(f"{first['year']} - –õ–µ–¥ –≤—ã–¥–µ–ª–µ–Ω\n"
                     f"–ü–ª–æ—â–∞–¥—å: {first['stats']['ice_area_km2']:.2f} –∫–º¬≤",
                     fontsize=12, fontweight='bold')
        ax5.axis('off')
        
        # –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è 2025
        ax6 = plt.subplot(2, 4, 6)
        rgb2 = np.zeros((*last['data_db'].shape, 3))
        norm2 = (last['data_db'] - 15) / 15
        norm2 = np.clip(norm2, 0, 1)
        rgb2[:,:,:] = norm2[:,:,np.newaxis]
        rgb2[last['ice_mask'], :] = [0.1, 0.5, 1.0]
        ax6.imshow(rgb2)
        ax6.set_title(f"{last['year']} - –õ–µ–¥ –≤—ã–¥–µ–ª–µ–Ω\n"
                     f"–ü–ª–æ—â–∞–¥—å: {last['stats']['ice_area_km2']:.2f} –∫–º¬≤",
                     fontsize=12, fontweight='bold')
        ax6.axis('off')
        
        # –†–∞–∑–Ω–∏—Ü–∞ backscatter
        ax7 = plt.subplot(2, 4, 7)
        diff_backscatter = last['data_db'] - first['data_db']
        im7 = ax7.imshow(diff_backscatter, cmap='RdBu_r', vmin=-5, vmax=5)
        ax7.set_title(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ Backscatter\n{first['year']} ‚Üí {last['year']}",
                     fontsize=12, fontweight='bold')
        ax7.axis('off')
        plt.colorbar(im7, ax=ax7, label='Œî dB', fraction=0.046)
        
        # –ö–∞—Ä—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –ø–ª–æ—â–∞–¥–∏
        ax8 = plt.subplot(2, 4, 8)
        change_map = np.zeros(first['ice_mask'].shape)
        change_map[first['ice_mask'] & ~last['ice_mask']] = -1  # –ü–æ—Ç–µ—Ä–∏
        change_map[~first['ice_mask'] & last['ice_mask']] = 1   # –ü—Ä–∏—Ä–æ—Å—Ç
        
        rgb_change = np.zeros((*first['data_db'].shape, 3))
        rgb_change[:,:,:] = norm1[:,:,np.newaxis]
        rgb_change[change_map == -1, :] = [1.0, 0.2, 0.2]  # –ö—Ä–∞—Å–Ω—ã–π - –ø–æ—Ç–µ—Ä–∏
        rgb_change[change_map == 1, :] = [0.2, 1.0, 0.2]   # –ó–µ–ª–µ–Ω—ã–π - –ø—Ä–∏—Ä–æ—Å—Ç
        rgb_change[(first['ice_mask'] & last['ice_mask']), :] = [0.1, 0.5, 1.0]  # –ì–æ–ª—É–±–æ–π - —Å—Ç–∞–±–∏–ª—å–Ω–æ
        
        ax8.imshow(rgb_change)
        
        area_change = last['stats']['ice_area_km2'] - first['stats']['ice_area_km2']
        pct_change = (area_change / first['stats']['ice_area_km2']) * 100
        
        ax8.set_title(f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏\n{area_change:+.2f} –∫–º¬≤ ({pct_change:+.1f}%)",
                     fontsize=12, fontweight='bold')
        ax8.axis('off')
        
        # –õ–µ–≥–µ–Ω–¥–∞
        red_patch = mpatches.Patch(color='red', label='–ü–æ—Ç–µ—Ä–∏ –ª—å–¥–∞')
        green_patch = mpatches.Patch(color='green', label='–ü—Ä–∏—Ä–æ—Å—Ç –ª—å–¥–∞')
        blue_patch = mpatches.Patch(color='cyan', label='–°—Ç–∞–±–∏–ª—å–Ω–∞—è –æ–±–ª–∞—Å—Ç—å')
        fig.legend(handles=[red_patch, green_patch, blue_patch],
                  loc='lower center', ncol=3, fontsize=14, frameon=True, fancybox=True)
        
        plt.suptitle(f'–î–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: {first["year"]} vs {last["year"]}\n'
                    f'–õ–µ–¥–Ω–∏–∫ –ì–æ–ª—É–±–∏–Ω–∞, Ala-Archa Gorge',
                    fontsize=18, fontweight='bold')
        plt.tight_layout(rect=[0, 0.03, 1, 0.97])
        
        output2 = viz_dir / "glacier_detailed_comparison.png"
        plt.savefig(output2, dpi=300, bbox_inches='tight', facecolor='white')
        print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output2.name}")
        plt.close()

# === –í–ò–ó–£–ê–õ–ò–ó–ê–¶–ò–Ø 3: –ì—Ä–∞—Ñ–∏–∫ –ø–ª–æ—â–∞–¥–∏ ===
if len(results) > 1:
    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(14, 10))
    
    years = [r['year'] for r in results]
    areas = [r['ice_area_km2'] for r in results]
    backscatter = [r['mean_backscatter'] for r in results]
    
    # –ì—Ä–∞—Ñ–∏–∫ 1: –ü–ª–æ—â–∞–¥—å
    color1 = '#2E86AB'
    ax1.plot(years, areas, 'o-', linewidth=3, markersize=10, color=color1, label='–ü–ª–æ—â–∞–¥—å –ª—å–¥–∞')
    ax1.fill_between(years, areas, alpha=0.3, color=color1)
    ax1.set_xlabel('–ì–æ–¥', fontsize=14, fontweight='bold')
    ax1.set_ylabel('–ü–ª–æ—â–∞–¥—å –ª—å–¥–∞ (–∫–º¬≤)', fontsize=14, fontweight='bold', color=color1)
    ax1.tick_params(axis='y', labelcolor=color1)
    ax1.set_title('–î–∏–Ω–∞–º–∏–∫–∞ –ø–ª–æ—â–∞–¥–∏ –ª–µ–¥–Ω–∏–∫–∞ –ì–æ–ª—É–±–∏–Ω–∞ (2017-2025)', 
                 fontsize=16, fontweight='bold', pad=20)
    ax1.grid(True, alpha=0.3, linestyle='--')
    ax1.legend(loc='upper left', fontsize=12)
    
    # –î–æ–±–∞–≤–ª—è–µ–º backscatter –Ω–∞ –≤—Ç–æ—Ä–æ–π –æ—Å–∏
    ax1_twin = ax1.twinx()
    color2 = '#A23B72'
    ax1_twin.plot(years, backscatter, 's--', linewidth=2, markersize=8, 
                 color=color2, label='–°—Ä–µ–¥–Ω–∏–π backscatter', alpha=0.7)
    ax1_twin.set_ylabel('Backscatter (dB)', fontsize=14, fontweight='bold', color=color2)
    ax1_twin.tick_params(axis='y', labelcolor=color2)
    ax1_twin.legend(loc='upper right', fontsize=12)
    
    # –ê–Ω–Ω–æ—Ç–∞—Ü–∏–∏
    for year, area in zip(years, areas):
        ax1.annotate(f'{area:.1f}',
                    xy=(year, area),
                    xytext=(0, 10),
                    textcoords='offset points',
                    ha='center',
                    fontsize=9,
                    bbox=dict(boxstyle='round,pad=0.5', fc='white', alpha=0.8))
    
    # –ì—Ä–∞—Ñ–∏–∫ 2: –ò–∑–º–µ–Ω–µ–Ω–∏—è
    base_area = areas[0]
    changes = [(a - base_area) / base_area * 100 for a in areas]
    colors = ['green' if c >= 0 else 'red' for c in changes]
    
    bars = ax2.bar(years, changes, color=colors, alpha=0.7, edgecolor='black', linewidth=1.5)
    ax2.set_xlabel('–ì–æ–¥', fontsize=14, fontweight='bold')
    ax2.set_ylabel('–ò–∑–º–µ–Ω–µ–Ω–∏–µ (%)', fontsize=14, fontweight='bold')
    ax2.set_title(f'–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø–ª–æ—â–∞–¥–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ {years[0]} –≥–æ–¥–∞',
                 fontsize=16, fontweight='bold', pad=20)
    ax2.axhline(y=0, color='black', linestyle='-', linewidth=2)
    ax2.grid(True, alpha=0.3, linestyle='--', axis='y')
    
    # –ó–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü–∞—Ö
    for year, change, bar in zip(years, changes, bars):
        height = bar.get_height()
        ax2.text(bar.get_x() + bar.get_width()/2., height,
                f'{change:+.1f}%',
                ha='center',
                va='bottom' if change > 0 else 'top',
                fontsize=10,
                fontweight='bold')
    
    plt.tight_layout()
    output3 = viz_dir / "glacier_area_dynamics.png"
    plt.savefig(output3, dpi=300, bbox_inches='tight', facecolor='white')
    print(f"‚úÖ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {output3.name}")
    plt.close()

# –§–ò–ù–ê–õ–¨–ù–´–ô –û–¢–ß–ï–¢
print("\n" + "=" * 80)
print("üìä –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
print("=" * 80)

if results:
    first = results[0]
    last = results[-1]
    
    print(f"\nüìà –ü–ª–æ—â–∞–¥—å –ª—å–¥–∞:")
    print(f"   {first['year']}: {first['ice_area_km2']:.2f} –∫–º¬≤")
    print(f"   {last['year']}: {last['ice_area_km2']:.2f} –∫–º¬≤")
    
    area_change = last['ice_area_km2'] - first['ice_area_km2']
    pct_change = (area_change / first['ice_area_km2']) * 100
    
    print(f"\nüìâ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ {last['year'] - first['year']} –ª–µ—Ç:")
    print(f"   –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ: {area_change:+.2f} –∫–º¬≤")
    print(f"   –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ: {pct_change:+.2f}%")
    
    print(f"\nüìä Backscatter:")
    print(f"   {first['year']}: {first['mean_backscatter']:.2f} dB")
    print(f"   {last['year']}: {last['mean_backscatter']:.2f} dB")
    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {last['mean_backscatter'] - first['mean_backscatter']:+.2f} dB")
    
    if abs(pct_change) < 1.0:
        print(f"\n‚úÖ –í–´–í–û–î: –ü–ª–æ—â–∞–¥—å –ª–µ–¥–Ω–∏–∫–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–±–∏–ª—å–Ω–∞")
    elif pct_change < -1.0:
        print(f"\n‚ö†Ô∏è  –í–´–í–û–î: –õ–µ–¥–Ω–∏–∫ —Å–æ–∫—Ä–∞—â–∞–µ—Ç—Å—è ({pct_change:.1f}%)")
    else:
        print(f"\nüìà –í–´–í–û–î: –õ–µ–¥–Ω–∏–∫ —Ä–∞—Å—Ç–µ—Ç ({pct_change:.1f}%)")
    
    print(f"\nüìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"   ‚Ä¢ glacier_real_timeline.png - —Ä–µ–∞–ª—å–Ω—ã–µ SAR —Å–Ω–∏–º–∫–∏")
    print(f"   ‚Ä¢ glacier_detailed_comparison.png - –¥–µ—Ç–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ")
    print(f"   ‚Ä¢ glacier_area_dynamics.png - –¥–∏–Ω–∞–º–∏–∫–∞ –ø–ª–æ—â–∞–¥–∏")
    print(f"   ‚Ä¢ glacier_correct_statistics.json - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

print("\n" + "=" * 80)
print("‚úÖ –ê–ù–ê–õ–ò–ó –° –†–ï–ê–õ–¨–ù–´–ú–ò –î–ê–ù–ù–´–ú–ò –ó–ê–í–ï–†–®–ï–ù!")
print("=" * 80)
print()


