#!/usr/bin/env python3
"""
–ü–†–ê–í–ò–õ–¨–ù–´–ô –∞–Ω–∞–ª–∏–∑ –ª–µ–¥–Ω–∏–∫–∞ –ì–æ–ª—É–±–∏–Ω–∞ —Å —Ç–æ—á–Ω—ã–º–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Ç–∫—É –∏–∑ XML –¥–ª—è —Ç–æ—á–Ω–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
"""

import numpy as np
import rasterio
import rasterio.transform
from datetime import datetime
from pathlib import Path
import json
import xml.etree.ElementTree as ET
from scipy.ndimage import median_filter

print("=" * 80)
print("üèîÔ∏è  –ü–†–ê–í–ò–õ–¨–ù–´–ô –ê–ù–ê–õ–ò–ó –° –¢–û–ß–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò")
print("    –ú–µ—Ç–æ–¥: –ì–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Å–µ—Ç–∫–∞ –∏–∑ XML + 33.3% –ø–µ—Ä—Ü–µ–Ω—Ç–∏–ª—å")
print("=" * 80)

TARGET_LON = (74.460, 74.520)
TARGET_LAT = (42.440, 42.500)
CALIB_FACTOR = 52.7
GLACIER_PERCENTILE = 33.3

print(f"\nüéØ –¶–ï–õ–ï–í–ê–Ø –û–ë–õ–ê–°–¢–¨:")
print(f"   Lon: {TARGET_LON[0]} - {TARGET_LON[1]}¬∞E")
print(f"   Lat: {TARGET_LAT[0]} - {TARGET_LAT[1]}¬∞N\n")

def get_geolocation_grid(xml_path):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏–æ–Ω–Ω—É—é —Å–µ—Ç–∫—É –∏–∑ XML –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö"""
    try:
        tree = ET.parse(xml_path)
        root = tree.getroot()
        
        # –ò—â–µ–º geolocationGrid
        ns = {'s1': 'http://www.esa.int/safe/sentinel-1.0'}
        
        geolocation_grid = root.find('.//s1:geolocationGrid', ns)
        if geolocation_grid is None:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –±–µ–∑ namespace
            geolocation_grid = root.find('.//geolocationGrid')
        
        if geolocation_grid is None:
            return None
        
        gcps = []
        
        # –ò—â–µ–º –≤—Å–µ geolocationGridPoint
        for point in geolocation_grid.findall('.//geolocationGridPoint'):
            try:
                pixel = int(point.find('pixel').text)
                line = int(point.find('line').text)
                lat = float(point.find('latitude').text)
                lon = float(point.find('longitude').text)
                
                gcps.append(rasterio.control.GroundControlPoint(
                    row=line, col=pixel, x=lon, y=lat
                ))
            except (AttributeError, ValueError, TypeError):
                continue
        
        if not gcps:
            return None
            
        return gcps
        
    except Exception as e:
        print(f"     ‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ XML: {e}")
        return None

def lonlat_to_pixel_precise(lon, lat, gcps, img_width, img_height):
    """–¢–æ—á–Ω–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è lon/lat –≤ pixel –∏—Å–ø–æ–ª—å–∑—É—è GCP"""
    try:
        # –°–æ–∑–¥–∞–µ–º transform –∏–∑ GCPs
        transform = rasterio.transform.from_gcps(gcps)
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º lon/lat –≤ pixel
        row, col = rasterio.transform.rowcol(transform, lon, lat)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        col = int(np.clip(col, 0, img_width - 1))
        row = int(np.clip(row, 0, img_height - 1))
        
        return col, row
        
    except Exception as e:
        return None, None

def calibrate_to_sigma0(data, factor):
    return 10 * np.log10((data.astype(float) ** 2) + 1e-10) - factor

def find_glacier_simple(data_db, percentile=33.3):
    data_filtered = median_filter(data_db, size=3)
    valid = np.isfinite(data_filtered)
    threshold = np.percentile(data_filtered[valid], percentile)
    glacier_mask = (data_filtered <= threshold) & valid
    glacier_pixels = np.sum(glacier_mask)
    return glacier_mask, glacier_pixels, threshold

data_dir = Path("output/raw_data")
safe_dirs = sorted(list(data_dir.glob("*.SAFE")))
vv_files = sorted(list(data_dir.glob("**/*vv*.tiff")))

print(f"üìä –§–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞: {len(vv_files)}\n")

results = []
failed_years = []

for idx, (safe_dir, vv_file) in enumerate(zip(safe_dirs, vv_files), 1):
    date_str = vv_file.stem.split('-')[4][:8]
    date = datetime.strptime(date_str, '%Y%m%d')
    year = date.year
    
    print(f"[{idx}/{len(vv_files)}] {year}: {date.strftime('%Y-%m-%d')}", end='')
    
    try:
        # –ù–∞—Ö–æ–¥–∏–º XML —Ñ–∞–π–ª —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π
        xml_files = list(safe_dir.glob("**/s1*vv*.xml"))
        if not xml_files:
            print(" ‚ùå XML –Ω–µ –Ω–∞–π–¥–µ–Ω")
            failed_years.append(year)
            continue
        
        xml_path = xml_files[0]
        gcps = get_geolocation_grid(xml_path)
        
        if not gcps or len(gcps) < 4:
            print(" ‚ùå GCP –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ XML")
            failed_years.append(year)
            continue
        
        with rasterio.open(vv_file) as src:
            img_width = src.width
            img_height = src.height
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —É–≥–ª—ã —Ü–µ–ª–µ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏ –≤ –ø–∏–∫—Å–µ–ª–∏
            corners_lonlat = [
                (TARGET_LON[0], TARGET_LAT[0]),  # SW
                (TARGET_LON[1], TARGET_LAT[0]),  # SE
                (TARGET_LON[1], TARGET_LAT[1]),  # NE
                (TARGET_LON[0], TARGET_LAT[1])   # NW
            ]
            
            pixels_x = []
            pixels_y = []
            
            for lon, lat in corners_lonlat:
                px, py = lonlat_to_pixel_precise(lon, lat, gcps, img_width, img_height)
                if px is None or py is None:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã")
                pixels_x.append(px)
                pixels_y.append(py)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º bbox –≤ –ø–∏–∫—Å–µ–ª—è—Ö
            pixel_min = max(0, min(pixels_x))
            pixel_max = min(img_width, max(pixels_x))
            line_min = max(0, min(pixels_y))
            line_max = min(img_height, max(pixels_y))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–ª–∞—Å—Ç—å –≤–∞–ª–∏–¥–Ω–∞
            if pixel_max <= pixel_min or line_max <= line_min:
                print(f" ‚ùå –¶–µ–ª–µ–≤–∞—è –æ–±–ª–∞—Å—Ç—å –≤–Ω–µ —Å–Ω–∏–º–∫–∞")
                failed_years.append(year)
                continue
            
            # –ß–∏—Ç–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            window_width = pixel_max - pixel_min
            window_height = line_max - line_min
            
            if window_width < 50 or window_height < 50:
                print(f" ‚ùå –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ –æ–∫–Ω–æ: {window_width}x{window_height}")
                failed_years.append(year)
                continue
            
            region_data = src.read(1, window=((line_min, line_max), (pixel_min, pixel_max)))
            region_db = calibrate_to_sigma0(region_data, CALIB_FACTOR)
            
            glacier_mask, glacier_pixels, threshold = find_glacier_simple(
                region_db, GLACIER_PERCENTILE
            )
            
            glacier_area_km2 = (glacier_pixels * 100) / 1e6
            
            glacier_backscatter = region_db[glacier_mask]
            glacier_backscatter = glacier_backscatter[np.isfinite(glacier_backscatter)]
            
            valid = np.isfinite(region_db)
            total_pixels = np.sum(valid)
            coverage_pct = (glacier_pixels / total_pixels) * 100
            
            stats = {
                'year': year,
                'date': date.strftime('%Y-%m-%d'),
                'glacier_area_km2': float(glacier_area_km2),
                'glacier_pixels': int(glacier_pixels),
                'coverage_percent': float(coverage_pct),
                'mean_backscatter': float(np.mean(glacier_backscatter)),
                'median_backscatter': float(np.median(glacier_backscatter)),
                'std_backscatter': float(np.std(glacier_backscatter)),
                'min_backscatter': float(np.min(glacier_backscatter)),
                'max_backscatter': float(np.max(glacier_backscatter)),
                'threshold_db': float(threshold),
                'window_size': f"{window_width}x{window_height}",
                'gcps_count': len(gcps)
            }
            
            results.append(stats)
            
            print(f" ‚Üí {glacier_area_km2:>5.2f} –∫–º¬≤ ({coverage_pct:.1f}%, –æ–∫–Ω–æ: {window_width}x{window_height} px)")
            
    except Exception as e:
        print(f" ‚ùå –û—à–∏–±–∫–∞: {e}")
        failed_years.append(year)

if results:
    output_file = Path("output/results/glacier_golubina_PRECISE.json")
    output_file.parent.mkdir(parents=True, exist_ok=True)
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, indent=2, ensure_ascii=False)
    
    print(f"\n{'=' * 80}")
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –° –¢–û–ß–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò")
    print(f"{'=' * 80}")
    
    print(f"\n{'–ì–æ–¥':<6} {'–î–∞—Ç–∞':<12} {'–ü–ª–æ—â–∞–¥—å':<15} {'%':<8} {'Sigma0':<15} {'–û–∫–Ω–æ':<15} {'–ò–∑–º.–æ—Ç 2017'}")
    print(f"{'-'*6} {'-'*12} {'-'*15} {'-'*8} {'-'*15} {'-'*15} {'-'*18}")
    
    base_area = results[0]['glacier_area_km2']
    
    for r in results:
        change = r['glacier_area_km2'] - base_area
        change_pct = (change / base_area) * 100
        
        if change_pct > 5:
            trend = "üü¢"
        elif change_pct < -5:
            trend = "üî¥"
        else:
            trend = "‚úÖ"
        
        print(f"{r['year']:<6} {r['date']:<12} {r['glacier_area_km2']:>9.2f} –∫–º¬≤   {r['coverage_percent']:>5.1f}%  "
              f"{r['mean_backscatter']:>6.2f} dB  {r['window_size']:<15} {trend} {change:+6.2f} ({change_pct:+5.1f}%)")
    
    first = results[0]
    last = results[-1]
    
    area_change = last['glacier_area_km2'] - first['glacier_area_km2']
    area_change_pct = (area_change / first['glacier_area_km2']) * 100
    
    print(f"\n{'=' * 80}")
    print(f"üìà –ò–ó–ú–ï–ù–ï–ù–ò–Ø {first['year']} ‚Üí {last['year']} ({len(results)} —Å–Ω–∏–º–∫–æ–≤)")
    print(f"{'=' * 80}")
    
    print(f"\n‚ùÑÔ∏è  –ü–õ–û–©–ê–î–¨ –õ–ï–î–ù–ò–ö–ê:")
    print(f"   {first['year']}: {first['glacier_area_km2']:.2f} –∫–º¬≤ ({first['coverage_percent']:.1f}%)")
    print(f"   {last['year']}: {last['glacier_area_km2']:.2f} –∫–º¬≤ ({last['coverage_percent']:.1f}%)")
    print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {area_change:+.2f} –∫–º¬≤ ({area_change_pct:+.1f}%)")
    
    if abs(area_change_pct) < 10:
        status = "‚úÖ –°–¢–ê–ë–ò–õ–¨–ù–ê"
    elif area_change_pct < -10:
        status = "üî¥ –°–û–ö–†–ê–©–ê–ï–¢–°–Ø"
    else:
        status = "üü¢ –†–ê–°–¢–ï–¢"
    
    print(f"   –°—Ç–∞—Ç—É—Å: {status}")
    
    avg_area = np.mean([r['glacier_area_km2'] for r in results])
    std_area = np.std([r['glacier_area_km2'] for r in results])
    
    print(f"\nüîÑ –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    print(f"   –°—Ä–µ–¥–Ω–µ–µ: {avg_area:.2f} ¬± {std_area:.2f} –∫–º¬≤")
    print(f"   CV: {(std_area/avg_area)*100:.1f}%")
    
    print(f"\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {output_file}")
    
    if failed_years:
        print(f"\n‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≥–æ–¥—ã: {', '.join(map(str, failed_years))}")
    
    print(f"\n{'=' * 80}")
    print(f"‚úÖ –ê–ù–ê–õ–ò–ó –° –¢–û–ß–ù–´–ú–ò –ö–û–û–†–î–ò–ù–ê–¢–ê–ú–ò –ó–ê–í–ï–†–®–ï–ù")
    print(f"{'=' * 80}\n")
else:
    print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –Ω–∏ –æ–¥–∏–Ω —Å–Ω–∏–º–æ–∫")


