#!/usr/bin/env python3
"""
–°–∫–∞—á–∏–≤–∞–Ω–∏–µ SAR –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bearer —Ç–æ–∫–µ–Ω–∞
"""

import asf_search as asf
from datetime import datetime
import yaml
from pathlib import Path
import sys
import os


def download_with_bearer_token(bearer_token, start_year=2017, end_year=2025, max_downloads=9):
    """–°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Bearer —Ç–æ–∫–µ–Ω–∞"""
    
    print("=" * 80)
    print("üèîÔ∏è  –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–ô –õ–ï–î–ù–ò–ö–ê –ì–û–õ–£–ë–ò–ù–ê –° –¢–û–ö–ï–ù–û–ú")
    print("=" * 80)
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    with open('config.yaml', 'r', encoding='utf-8') as f:
        config = yaml.safe_load(f)
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –ª–µ–¥–Ω–∏–∫–∞
    bbox_config = config['sar_data']['api_download']['target_glacier_bbox']
    
    # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    wkt_aoi = f"POLYGON(({bbox_config['min_lon']} {bbox_config['min_lat']}, " \
              f"{bbox_config['max_lon']} {bbox_config['min_lat']}, " \
              f"{bbox_config['max_lon']} {bbox_config['max_lat']}, " \
              f"{bbox_config['min_lon']} {bbox_config['max_lat']}, " \
              f"{bbox_config['min_lon']} {bbox_config['min_lat']}))"
    
    print(f"üìç –û–±–ª–∞—Å—Ç—å: –õ–µ–¥–Ω–∏–∫ –ì–æ–ª—É–±–∏–Ω–∞, –ê–ª–∞-–ê—Ä—á–∞")
    print(f"   –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {bbox_config['min_lon']}, {bbox_config['min_lat']} - "
          f"{bbox_config['max_lon']}, {bbox_config['max_lat']}")
    
    # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    output_dir = Path("output/raw_data")
    output_dir.mkdir(parents=True, exist_ok=True)
    print(f"üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {output_dir}")
    
    target_month = config['sar_data']['api_download']['target_month']
    
    print(f"\n‚è∞ –ü–µ—Ä–∏–æ–¥: {start_year} - {end_year}")
    print(f"üìÖ –ú–µ—Å—è—Ü: {target_month} (–∏—é–ª—å - –ø–∏–∫ —Ç–∞—è–Ω–∏—è)")
    print(f"üõ∞Ô∏è  –°–ø—É—Ç–Ω–∏–∫: Sentinel-1A")
    print(f"üì° –ü–æ–ª—è—Ä–∏–∑–∞—Ü–∏—è: VV+VH")
    print(f"üéØ –ú–∞–∫—Å–∏–º—É–º: {max_downloads} —Å–Ω–∏–º–∫–æ–≤")
    
    all_results = []
    
    # –ü–æ–∏—Å–∫ –ø–æ –≥–æ–¥–∞–º
    print("\nüîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤...")
    for year in range(start_year, end_year + 1):
        if len(all_results) >= max_downloads:
            print(f"‚úã –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç ({max_downloads}), –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–∏—Å–∫–∞")
            break
            
        start_date = f"{year}-{target_month-1:02d}-01" if target_month > 1 else f"{year}-01-01"
        end_date = f"{year}-{target_month+1:02d}-30" if target_month < 12 else f"{year}-12-31"
        
        try:
            results = asf.geo_search(
                platform=[asf.PLATFORM.SENTINEL1],
                intersectsWith=wkt_aoi,
                start=start_date,
                end=end_date,
                processingLevel=[asf.PRODUCT_TYPE.GRD_HD],
                beamMode=[asf.BEAMMODE.IW],
            )
            
            if results:
                target_date = datetime(year, target_month, 15)
                best_result = None
                min_diff = float('inf')
                
                for r in results:
                    scene_date_str = r.properties['startTime']
                    if isinstance(scene_date_str, str):
                        scene_date = datetime.fromisoformat(scene_date_str.replace('Z', '+00:00'))
                    else:
                        scene_date = scene_date_str
                    
                    diff = abs((scene_date.replace(tzinfo=None) - target_date).days)
                    if diff < min_diff:
                        min_diff = diff
                        best_result = r
                
                if best_result:
                    all_results.append(best_result)
                    scene_date_str = best_result.properties['startTime']
                    if isinstance(scene_date_str, str):
                        scene_date = datetime.fromisoformat(scene_date_str.replace('Z', '+00:00'))
                    else:
                        scene_date = scene_date_str
                    scene_date_formatted = scene_date.strftime('%Y-%m-%d')
                    file_size = best_result.properties.get('bytes', 0) / (1024**3)
                    print(f"‚úÖ {year}: –Ω–∞–π–¥–µ–Ω —Å–Ω–∏–º–æ–∫ –æ—Ç {scene_date_formatted} (~{file_size:.2f} GB)")
            else:
                print(f"‚ùå {year}: —Å–Ω–∏–º–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå {year}: –æ—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ - {e}")
    
    if not all_results:
        print("\n‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤!")
        return []
    
    print(f"\nüìä –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {len(all_results)} —Å–Ω–∏–º–∫–æ–≤")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
    print("\nüìã –î–µ—Ç–∞–ª–∏ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–Ω–∏–º–∫–æ–≤:")
    print("-" * 80)
    for i, result in enumerate(all_results, 1):
        props = result.properties
        scene_date_str = props['startTime']
        if isinstance(scene_date_str, str):
            scene_date = datetime.fromisoformat(scene_date_str.replace('Z', '+00:00'))
        else:
            scene_date = scene_date_str
        print(f"{i}. –î–∞—Ç–∞: {scene_date.strftime('%Y-%m-%d %H:%M')}")
        print(f"   –°–ø—É—Ç–Ω–∏–∫: {props['platform']}")
        print(f"   –†–∞–∑–º–µ—Ä: {props.get('bytes', 0)/(1024**3):.2f} GB")
        print(f"   –§–∞–π–ª: {props['fileName']}")
        print()
    
    total_size = sum(r.properties.get('bytes', 0) for r in all_results) / (1024**3)
    print(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size:.2f} GB")
    print(f"‚è±Ô∏è  –ü—Ä–∏–º–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è: {total_size*2:.0f}-{total_size*5:.0f} –º–∏–Ω—É—Ç")
    
    print("\nüì• –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Å Bearer —Ç–æ–∫–µ–Ω–æ–º...")
    
    # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å Bearer —Ç–æ–∫–µ–Ω–æ–º
    session = asf.ASFSession()
    session.auth_with_token(bearer_token)
    
    downloaded_count = 0
    failed_files = []
    
    try:
        for i, result in enumerate(all_results, 1):
            filename = result.properties['fileName']
            output_path = output_dir / filename
            
            print(f"\n[{i}/{len(all_results)}] –°–∫–∞—á–∏–≤–∞–Ω–∏–µ: {filename}")
            
            if output_path.exists():
                file_size_mb = output_path.stat().st_size / (1024**2)
                print(f"   ‚è≠Ô∏è  –§–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ({file_size_mb:.1f} MB), –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                downloaded_count += 1
                continue
            
            try:
                print(f"   ‚¨áÔ∏è  –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è...")
                result.download(path=str(output_dir), session=session)
                
                if output_path.exists():
                    file_size_mb = output_path.stat().st_size / (1024**2)
                    print(f"   ‚úÖ –°–∫–∞—á–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ ({file_size_mb:.1f} MB)")
                    downloaded_count += 1
                else:
                    print(f"   ‚ö†Ô∏è  –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
                    failed_files.append(filename)
                    
            except Exception as e:
                print(f"   ‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è: {e}")
                failed_files.append(filename)
        
        print("\n" + "=" * 80)
        print("‚úÖ –°–ö–ê–ß–ò–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("=" * 80)
        print(f"üìä –£—Å–ø–µ—à–Ω–æ: {downloaded_count}/{len(all_results)} —Ñ–∞–π–ª–æ–≤")
        
        if failed_files:
            print(f"\n‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å {len(failed_files)} —Ñ–∞–π–ª–æ–≤:")
            for fname in failed_files:
                print(f"   ‚Ä¢ {fname}")
        
        print(f"\nüìÅ –§–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_dir}")
        print("üöÄ –ì–æ—Ç–æ–≤–æ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ!")
        
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    
    return all_results


if __name__ == "__main__":
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
    bearer_token = None
    
    if len(sys.argv) > 1:
        bearer_token = sys.argv[1]
    elif 'EARTHDATA_TOKEN' in os.environ:
        bearer_token = os.environ['EARTHDATA_TOKEN']
    else:
        print("‚ùå –û—à–∏–±–∫–∞: Bearer —Ç–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω!")
        print("\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  –í–∞—Ä–∏–∞–Ω—Ç 1: python3 download_with_token.py YOUR_TOKEN")
        print("  –í–∞—Ä–∏–∞–Ω—Ç 2: export EARTHDATA_TOKEN='YOUR_TOKEN' && python3 download_with_token.py")
        sys.exit(1)
    
    print("üîê Bearer —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω")
    
    try:
        results = download_with_bearer_token(
            bearer_token=bearer_token,
            start_year=2017,
            end_year=2025,
            max_downloads=9
        )
        
        if results:
            print(f"\n‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –ù–∞–π–¥–µ–Ω–æ –∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(results)} —Å–Ω–∏–º–∫–æ–≤.")
        else:
            print("\n‚ö†Ô∏è  –°–Ω–∏–º–∫–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()


